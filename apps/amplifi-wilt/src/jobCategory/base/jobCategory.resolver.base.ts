/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateJobCategoryArgs } from "./CreateJobCategoryArgs";
import { UpdateJobCategoryArgs } from "./UpdateJobCategoryArgs";
import { DeleteJobCategoryArgs } from "./DeleteJobCategoryArgs";
import { JobCategoryCountArgs } from "./JobCategoryCountArgs";
import { JobCategoryFindManyArgs } from "./JobCategoryFindManyArgs";
import { JobCategoryFindUniqueArgs } from "./JobCategoryFindUniqueArgs";
import { JobCategory } from "./JobCategory";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { JobCategoryService } from "../jobCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobCategory)
export class JobCategoryResolverBase {
  constructor(
    protected readonly service: JobCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobCategory",
    action: "read",
    possession: "any",
  })
  async _jobCategoriesMeta(
    @graphql.Args() args: JobCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobCategory])
  @nestAccessControl.UseRoles({
    resource: "JobCategory",
    action: "read",
    possession: "any",
  })
  async jobCategories(
    @graphql.Args() args: JobCategoryFindManyArgs
  ): Promise<JobCategory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobCategory",
    action: "read",
    possession: "own",
  })
  async jobCategory(
    @graphql.Args() args: JobCategoryFindUniqueArgs
  ): Promise<JobCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobCategory)
  @nestAccessControl.UseRoles({
    resource: "JobCategory",
    action: "create",
    possession: "any",
  })
  async createJobCategory(
    @graphql.Args() args: CreateJobCategoryArgs
  ): Promise<JobCategory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobCategory)
  @nestAccessControl.UseRoles({
    resource: "JobCategory",
    action: "update",
    possession: "any",
  })
  async updateJobCategory(
    @graphql.Args() args: UpdateJobCategoryArgs
  ): Promise<JobCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobCategory)
  @nestAccessControl.UseRoles({
    resource: "JobCategory",
    action: "delete",
    possession: "any",
  })
  async deleteJobCategory(
    @graphql.Args() args: DeleteJobCategoryArgs
  ): Promise<JobCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job], { name: "jobs" })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async resolveFieldJobs(
    @graphql.Parent() parent: JobCategory,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
